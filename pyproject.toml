[tool.poetry]
name = "cosmos"
version = "0.0.0"
description = "Bink Provided Loyalty"
authors = ["Stewart Perrygrove <sperrygrove@bink.com>"]
readme = "README.md"

[[tool.poetry.source]]
name = "bink-pypi"
url = "https://pypi.tools.uksouth.bink.sh/simple"
default = false
secondary = false

[tool.poetry.scripts]
cosmos = "cosmos.core.cli:app"
bestla = "data_gen.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
sqlalchemy = {version = "^1.4.43", extras = ["asyncio"]}
pydantic = {version = "^1.10.2", extras = ["email"]}
PyYAML = "^6.0"
sentry-sdk = "^1.10.1"
azure-identity = "^1.11.0"
azure-keyvault = "^4.2.0"
rq = "^1.11.1"
redis = "^4.3.4"
python-dotenv = "^0.21.0"
psycopg2-binary = "^2.9.5"
babel = "^2.11.0"
retry-tasks-lib = {version = "^2.0.0", source = "bink-pypi"}
cosmos-message-lib = {version = "^1.3.0", source = "bink-pypi"}
uvicorn = {version = "^0.19.0", extras = ["standard"]}
alembic = "^1.8.1"
azure-storage-blob = "^12.14.1"
prettyprinter = "^0.18.0"
fastapi = "^0.86.0"
asyncpg = "^0.27.0"
typer = "^0.7.0"
prometheus-client = "0.12.0"
ujson = "^5.5.0"
hiredis = "^2.1.0"
fastapi-prometheus-metrics = {version = "^0.2.3", source = "bink-pypi"}
apscheduler = "^3.9.1.post1"
gunicorn = "^20.1.0"
# ADMIN DEPENDENCIES
Flask = { version = "^2.2.2", optional = true }
Flask-Admin = { version = "^1.6.0", optional = true }
Authlib = { version = "^1.1.0", optional = true }
requests = { version = "^2.28.1", optional = true }
Flask-WTF = { version = "^1.0.1", optional = true }
cryptography = { version = "^38.0.3", optional = true }

[tool.poetry.extras]
admin = ["Flask", "Flask-Admin", "Authlib", "requests", "sentry-sdk[flask]", "Flask-WTF", "cryptography"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
mypy = "^0.982"
isort = "^5.10.1"
xenon = "^0.9.0"
types-PyYAML = "^6.0.12.1"
types-redis = "^4.3.21.3"
refurb = "!=1.9.1"  # refurb 1.9.1 raises a mypy error
ipython = "^8.7.0"
ruff = "^0.0.223"
types-Flask = "^1.1.6"

[tool.poetry.group.pytest]
optional = true

[tool.poetry.group.pytest.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.20.3"
pytest-mock = "^3.8.2"
SQLAlchemy-Utils = "^0.39.0"
testfixtures = "^7.0.4"
types-requests = "^2.28.11.7"
types-redis = "^4.4.0.0"
deepdiff = "^6.2.3"

[tool.poetry.group.datagen]
optional = true

[tool.poetry.group.datagen.dependencies]
hashids = "^1.3.1"
faker = "^15.3.3"
progressbar2 = "^4.2.0"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.pytest.ini_options]
asyncio_mode = "strict"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
lines_between_types = 1

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true
disallow_incomplete_defs = true
warn_redundant_casts = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[tool.ruff]
line-length = 120
show-source = true
target-version = "py310"
select = [
    "F",    # Pyflakes (F)
    "E", 
    "W",    # pycodestyle (E, W)
    "C90",  # mccabe (C90)
    # isort (I)
    # pydocstyle (D)
    "UP",   # pyupgrade (UP)
    "N",    # pep8-naming (N)
    "YTT",  # flake8-2020 (YTT)
    "ANN",  # flake8-annotations (ANN)
    "S",    # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",    # flake8-bugbear (B)
    "A",    # flake8-builtins (A)
    "C4",   # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN",  # flake8-import-conventions (ICN)
    "T20",  # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q",    # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM",  # flake8-simplify (SIM)
    "TID",  # flake8-tidy-imports (TID)
    "ARG",  # flake8-unused-arguments (ARG)
    "DTZ",  # flake8-datetimez (DTZ)
    # "ERA",  # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW",  # Pylint (PLC, PLE, PLR, PLW)
    "RUF",  # Ruff-specific rules (RUF)
]
ignore = [
    "ANN101", 
    "ANN102", 
    # disables function call in function parameter error 
    # arg = Depends(..) and arg = typer.Option(..) would be flagged
    "B008"
]

[tool.ruff.per-file-ignores]
# disable unused import error for __init__.py and cosmos/db/base.py
"__init__.py" = ["F401"]
"cosmos/db/base.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ARG001"]
"cosmos/core/config.py" = ["PLR2004"]
"tests/rewards/test_reward_import_and_updates.py" = ["N806"]
